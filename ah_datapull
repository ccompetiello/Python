import pandas as pd

class Amerihome_vol:
    def __init__(self, file_path, header=2):
        self.df = pd.read_csv(file_path, header=header)
        self.df['Closed Date'] = pd.to_datetime(self.df['Closed Date'], format="%m/%d/%Y", errors='coerce').fillna('1900-01-01')
        self.df['Total Loan Amount'] = self.df['Total Loan Amount'].str.replace('[\$,]', '', regex=True)
        self.df['Total Loan Amount'] = pd.to_numeric(self.df['Total Loan Amount'], errors='coerce')
        self.df['Term'] = pd.to_numeric(self.df['Term'], errors='coerce')

    def con_vol(self, year):
        monthly_vol = []
        total_vol = []
        for month in range(1, 9):
            df_filtered = self.df[(self.df['Closed Date'].dt.year == year) & (self.df['Closed Date'].dt.month == month)
                & (~self.df['Loan Status'].isin(['Loan Withdrawn', 'Loan Canceled', 'Loan Denied'])) & (self.df['Lock Comments'] != 'X') 
                & (~self.df['Term'].isin([6,9])) & (~self.df['Loan Type'].isin(['VA', 'FHA']))]
    
            loan_sum = df_filtered['Total Loan Amount'].sum()
            monthly_vol.append(loan_sum)
            total_vol = sum(monthly_vol)
        return monthly_vol, total_vol

    def non_con_vol(self, year):
        monthly_vol = []
        total_vol = []
        for month in range(1, 9):
            df_filtered = self.df[(self.df['Closed Date'].dt.year == year) & (self.df['Closed Date'].dt.month == month)
                & (~self.df['Loan Status'].isin(['Loan Withdrawn', 'Loan Canceled', 'Loan Denied'])) & (self.df['Lock Comments'] == 'X') 
                & (~self.df['Term'].isin([6,9])) & (~self.df['Loan Type'].isin(['VA', 'FHA']))]
    
            loan_sum = df_filtered['Total Loan Amount'].sum()
            monthly_vol.append(loan_sum)
            total_vol = sum(monthly_vol)
        return monthly_vol, total_vol

file_path = 'C:/Users/18458/Desktop/Accounting/Python/Report.csv'   
instance = Amerihome_vol(file_path, header=1)
call = instance.con_vol(2023)
non_con_call = instance.non_con_vol(2023)
print(call)
print(non_con_call)
